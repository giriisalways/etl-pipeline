library(bannerCommenter)
bannerCommenter::banner("Rt Calculations:EpiEstim package")
bannerCommenter::banner("Rt Calculations:EpiEstim package", snug = t)
bannerCommenter::banner("Rt Calculations:EpiEstim package", snug = T)
install.packages("EpiEstim")
library("libridate","tidyverse","EpiEstim","ggplot2",
"gridExtra","incidence","magrittr",
"readr","knitr","readxl","googlesheet4")
library(c("libridate","tidyverse","EpiEstim","ggplot2",
"gridExtra","incidence","magrittr",
"readr","knitr","readxl","googlesheet4"))
library(c("lubridate","tidyverse","EpiEstim","ggplot2",
"gridExtra","incidence","magrittr",
"readr","knitr","readxl","googlesheet4"))
library(easyphackages)
libraries(c("lubridate","tidyverse","EpiEstim","ggplot2",
"gridExtra","incidence","magrittr",
"readr","knitr","readxl","googlesheet4"))
library(easyphackages)
libraries("lubridate","tidyverse","EpiEstim","ggplot2",
"gridExtra","incidence","magrittr",
"readr","knitr","readxl","googlesheet4")
library(easypackages)
libraries("lubridate","tidyverse","EpiEstim","ggplot2",
"gridExtra","incidence","magrittr",
"readr","knitr","readxl","googlesheet4")
library(easypackages)
libraries("lubridate","tidyverse","EpiEstim","ggplot2",
"gridExtra","incidence","magrittr",
"readr","knitr","readxl","googlesheets4")
gs4_deauth()
sheets_url <- "https://docs.google.com/spreadsheets/d/1HeTZKEXtSYFDNKmVEcRmF573k2ZraDb6DzgCOSXI0f0/edit#gid=0"
df <- read_sheet(sheets_url, sheet = "city_stats")
city <- "Mumbai"
df2 <- df %>% filter(district == city)
glimpse(df2)
# todo v2 --> city <- args[1]
# todo v2 --> command line args or simply read from results of city criteria filters for RT and all districts for DT
# ensure that there is no missing data for the columns here.
# we need only 5 columns for the calculation -
df2 <- df2 %>% dplyr::select(date, district, total.confirmed, total.deceased, total.recovered) # keep only col needed.
df2 <- df2[complete.cases(df2), ] # remove rows with NA to allow for calculation.
df2$delta_case <- df2$total.confirmed - df2$total.deceased - df2$total.recovered
df2$date <- as_date(df2$date)
df3 = df %>% rename(I = delta_case, dates = date)
df3 = df2 %>% rename(I = delta_case, dates = date) %>%
dplyr::select(dates,I)
df3
rt_parametric <- estimate_R(df3,
method="parametric_si",
config = make_config(list(
mean_si = 2.6,
std_si = 1.5)))
rt_parametric
rt1 <- rt_parametric$R$`Mean(R)`
rt1$rt <- rt_parametric$R$`Mean(R)`
rt1$id <- 1:length(rt1$rt)
rt1 <- tibble(rt = rt_parametric$R$`Mean(R)`,
id = 1:length(rt1$rt))
plot(x = id, y = rt1)
plot(x = rt$id, y = rt$rt1)
rt1
ggplot(data = rt, aes(x = id, y = rt)) + geom_line()
ggplot(data = rt1, aes(x = id, y = rt)) + geom_line()
rt_parametric$R$`Quantile.0.025(R)`
str(rt_parametric)
rt_parametric$dates
rt1 <- tibble(rt = rt_parametric$R$`Mean(R)`,
low = rt_parametric$R$`Quantile.0.025(R)`,
high = rt_parametric$R$`Quantile.0.975(R)`,
dates = rt_parametric$dates)
ggplot(data = rt1, aes(x = dates, y = rt)) + geom_line() +
geom_ribbon(data = rt1, aex(ymin = low, ymax = high))
ggplot(data = rt1, aes(x = dates, y = rt)) + geom_line() +
geom_ribbon(data = rt1, aes(ymin = low, ymax = high))
rt1 <- tibble(rt = rt_parametric$R$`Mean(R)`,
low = rt_parametric$R$`Quantile.0.025(R)`,
high = rt_parametric$R$`Quantile.0.975(R)`,
dates = rt_parametric$dates)
ggplot(data = rt1, aes(x = dates, y = rt)) + geom_line() +
geom_ribbon(data = rt1, aes(ymin = low, ymax = high))
rt1
rt1 <- tibble(rt = rt_parametric$R$`Mean(R)`,
low = rt_parametric$R$`Quantile.0.025(R)`,
high = rt_parametric$R$`Quantile.0.975(R)`,
dates = rt_parametric$dates)
rt1 <- tibble(rt = rt_parametric$R$`Mean(R)`,
low = rt_parametric$R$`Quantile.0.025(R)`,
high = rt_parametric$R$`Quantile.0.975(R)`,
id = 1:nrow(rt1))
ggplot(data = rt1, aes(x = id, y = rt)) + geom_line() +
geom_ribbon(data = rt1, aes(ymin = low, ymax = high))
ggplot(data = rt1, aes(x = id, y = rt)) + geom_line() +
geom_ribbon(data = rt1, aes(ymin = low, ymax = high))
plot(x = rt1$id, y = rt1$rt, type = "l")
lines(x = rt1$id, y = rt1$low, lty = 2)
lines(x = rt1$id, y = rt1$high, lty = 2)
rt1 <- tibble(rt = rt_parametric$R$`Mean(R)`,
low = rt_parametric$R$`Mean(R)` - 1.96*rt_parametric$R$`Std(R)`,
high = rt_parametric$R$`Mean(R)` + 1.96*rt_parametric$R$`Std(R)`,
id = 1:nrow(rt1))
plot(x = rt1$id, y = rt1$rt, type = "l")
lines(x = rt1$id, y = rt1$low, lty = 2)
lines(x = rt1$id, y = rt1$high, lty = 2)
plot(rt_parametric)
config = make_config(list(mean_si = 3.96, std_mean_si = 0.215,
min_mean_si = 3.53, max_mean_si = 4.39,
std_si = 4.75, std_std_si = 0.145,
min_std_si = 4.46, max_std_si = 5.07,
n1 = 468, n2 = 468,mean_prior=2.6,
std_prior=2))
rt_nonparametric = estimate_R(df3,
method = "uncertain_si",
config = config)
plot(rt_nonparametric)
plot(rt_nonparametric)
rt_nonparametric$R
res <- rt_nonparametric$R
dates <- rt_nonparametric$dates
glimpse(res)
length(dates)
dim(df3)
length(rt_nonparametric$R$`Mean(R)`)
n <- length(df3$dates)
n
str(n)
dates <- rt_nonparametric$dates
dates_list <- dates[8:n]
length(dates_list)
n <- length(df3$dates)
dates_list <- dates[8:n]
res_df <- tibble(rt = rt_nonparametric$R$`Mean(R)`,
low = rt_nonparametric$R$`Mean(R)` - 1.96*rt_nonparametric$R$`Std(R)`,
high = rt_nonparametric$R$`Mean(R)` + 1.96*rt_nonparametric$R$`Std(R)`,
dates = dates_list)
str(res_df)
plot(res_df$dates, res_df$rt, type = "l")
lines(res_df$dates, res_df$low, lty = 2)
lines(res_df$dates, res_df$high, lty = 2)
plot(res_df$dates, res_df$rt, type = "l", col = "red")
lines(res_df$dates, res_df$low, lty = 2, col = "blue")
lines(res_df$dates, res_df$high, lty = 2, col = "blue")
res_df <- tibble(rt = rt_nonparametric$R$`Mean(R)`,
low = rt_nonparametric$R$`Mean(R)` - 1.96*rt_nonparametric$R$`Std(R)`,
high = rt_nonparametric$R$`Mean(R)` + 1.96*rt_nonparametric$R$`Std(R)`,
dates = dates_list,
city = city)
str(res_df)
library(easypackages)
libraries("lubridate","tidyverse","EpiEstim","ggplot2",
"gridExtra","incidence","magrittr",
"readr","knitr","readxl","googlesheets4")
gs4_deauth()
sheets_url <- "https://docs.google.com/spreadsheets/d/1HeTZKEXtSYFDNKmVEcRmF573k2ZraDb6DzgCOSXI0f0/edit#gid=0"
df <- read_sheet(sheets_url, sheet = "city_stats")
city <- "Mumbai"
df2 <- df %>% filter(district == city)
glimpse(df2)
# ensure that there is no missing data for the columns here.
# we need only 5 columns for the calculation -
df2 <- df2 %>% dplyr::select(date, district, total.confirmed, total.deceased, total.recovered) # keep only col needed.
df2 <- df2[complete.cases(df2), ] # remove rows with NA to allow for calculation.
df2$delta_case <- df2$total.confirmed - df2$total.deceased - df2$total.recovered
df2$date <- as_date(df2$date)
df3 = df2 %>% rename(I = delta_case, dates = date) %>%
dplyr::select(dates,I)
df3
library(easypackages)
libraries("lubridate","tidyverse","EpiEstim","ggplot2",
"gridExtra","incidence","magrittr",
"readr","knitr","readxl","googlesheets4")
# get the data --
gs4_deauth()
sheets_url <- "https://docs.google.com/spreadsheets/d/1HeTZKEXtSYFDNKmVEcRmF573k2ZraDb6DzgCOSXI0f0/edit#gid=0"
df <- read_sheet(sheets_url, sheet = "city_stats")
city <- "Mumbai"
df2 <- df %>% filter(district == city)
glimpse(df2)
# todo v2 --> city <- args[1]
# todo v2 --> command line args or simply read from results of city criteria filters for RT and all districts for DT
# ensure that there is no missing data for the columns here.
# we need only 5 columns for the calculation -
df2 <- df2 %>% dplyr::select(date, district, total.confirmed, total.deceased, total.recovered) # keep only col needed.
df2 <- df2[complete.cases(df2), ] # remove rows with NA to allow for calculation.
df2$delta_case <- df2$total.confirmed - df2$total.deceased - df2$total.recovered
df2$date <- as_date(df2$date)
df3 = tibble(date = df2$dates, I = df2$delta_case)
str(df3)
gs4_deauth()
sheets_url <- "https://docs.google.com/spreadsheets/d/1HeTZKEXtSYFDNKmVEcRmF573k2ZraDb6DzgCOSXI0f0/edit#gid=0"
df <- read_sheet(sheets_url, sheet = "city_stats")
city <- "Mumbai"
df2 <- df %>% filter(district == city)
glimpse(df2)
df2 <- df %>% filter(district == city)
glimpse(df2)
# ensure that there is no missing data for the columns here.
# we need only 5 columns for the calculation -
df2 <- df2 %>% dplyr::select(date, district, total.confirmed, total.deceased, total.recovered) # keep only col needed.
df2 <- df2[complete.cases(df2), ] # remove rows with NA to allow for calculation.
df2$delta_case <- df2$total.confirmed - df2$total.deceased - df2$total.recovered
df2$date <- as_date(df2$date)
df3 = tibble(date = df2$dates, I = df2$delta_case)
df2$delta_case <- df2$total.confirmed - df2$total.deceased - df2$total.recovered
df2$date <- as_date(df2$date)
df3 = tibble(date = df2$date, I = df2$delta_case)
str(df3)
library(easypackages)
libraries("lubridate","tidyverse","EpiEstim","ggplot2",
"gridExtra","incidence","magrittr",
"readr","knitr","readxl","googlesheets4")
# get the data --
gs4_deauth()
sheets_url <- "https://docs.google.com/spreadsheets/d/1HeTZKEXtSYFDNKmVEcRmF573k2ZraDb6DzgCOSXI0f0/edit#gid=0"
df <- read_sheet(sheets_url, sheet = "city_stats")
city <- "Mumbai"
df2 <- df %>% filter(district == city)
glimpse(df2)
# todo v2 --> city <- args[1]
# todo v2 --> command line args or simply read from results of city criteria filters for RT and all districts for DT
# ensure that there is no missing data for the columns here.
# we need only 5 columns for the calculation -
df2 <- df2 %>% dplyr::select(date, district, total.confirmed, total.deceased, total.recovered) # keep only col needed.
df2 <- df2[complete.cases(df2), ] # remove rows with NA to allow for calculation.
df2$delta_case <- df2$total.confirmed - df2$total.deceased - df2$total.recovered
df2$date <- as_date(df2$date)
df3 = tibble(dates = df2$date, I = df2$delta_case)
str(df3)
library(easypackages)
libraries("lubridate","tidyverse","EpiEstim","ggplot2",
"gridExtra","incidence","magrittr",
"readr","knitr","readxl","googlesheets4")
gs4_deauth()
sheets_url <- "https://docs.google.com/spreadsheets/d/1HeTZKEXtSYFDNKmVEcRmF573k2ZraDb6DzgCOSXI0f0/edit#gid=0"
df <- read_sheet(sheets_url, sheet = "city_stats")
city <- "Mumbai"
df2 <- df %>% filter(district == city)
glimpse(df2)
# todo v2 --> city <- args[1]
# todo v2 --> command line args or simply read from results of city criteria filters for RT and all districts for DT
# ensure that there is no missing data for the columns here.
# we need only 5 columns for the calculation -
df2 <- df2 %>% dplyr::select(date, district, total.confirmed, total.deceased, total.recovered) # keep only col needed.
df2 <- df2[complete.cases(df2), ] # remove rows with NA to allow for calculation.
df2$delta_case <- df2$total.confirmed - df2$total.deceased - df2$total.recovered
df2$date <- as_date(df2$date)
df3 = tibble(dates = df2$date, I = df2$delta_case)
str(df3)
config = make_config(list(mean_si = 3.96, std_mean_si = 0.215,
min_mean_si = 3.53, max_mean_si = 4.39,
std_si = 4.75, std_std_si = 0.145,
min_std_si = 4.46, max_std_si = 5.07,
n1 = 468, n2 = 468,mean_prior=2.6,
std_prior=2))
n <- length(df3$dates)
dates_list <- dates[8:n]
res_df <- tibble(rt = rt_nonparametric$R$`Mean(R)`,
low = rt_nonparametric$R$`Mean(R)` - 1.96*rt_nonparametric$R$`Std(R)`,
high = rt_nonparametric$R$`Mean(R)` + 1.96*rt_nonparametric$R$`Std(R)`,
dates = dates_list,
city = city)
str(res_df)
n <- length(df3$date)
dates_list <- dates[8:n]
dates_list <- date[8:n]
dates_list <- df3$date[8:n]
dates_list
config = make_config(list(mean_si = 3.96, std_mean_si = 0.215,
min_mean_si = 3.53, max_mean_si = 4.39,
std_si = 4.75, std_std_si = 0.145,
min_std_si = 4.46, max_std_si = 5.07,
n1 = 468, n2 = 468,mean_prior=2.6,
std_prior=2))
n <- length(df3$date)
n
n <- length(df3$date3)
n <- length(df3$dates)
n
dates_list <- dates[8:n]
library(easypackages)
libraries("lubridate","tidyverse","EpiEstim","ggplot2",
"gridExtra","incidence","magrittr",
"readr","knitr","readxl","googlesheets4")
# get the data --
gs4_deauth()
sheets_url <- "https://docs.google.com/spreadsheets/d/1HeTZKEXtSYFDNKmVEcRmF573k2ZraDb6DzgCOSXI0f0/edit#gid=0"
df <- read_sheet(sheets_url, sheet = "city_stats")
city <- "Mumbai"
df2 <- df %>% filter(district == city)
glimpse(df2)
# todo v2 --> city <- args[1]
# todo v2 --> command line args or simply read from results of city criteria filters for RT and all districts for DT
# ensure that there is no missing data for the columns here.
# we need only 5 columns for the calculation -
df2 <- df2 %>% dplyr::select(date, district, total.confirmed, total.deceased, total.recovered) # keep only col needed.
df2 <- df2[complete.cases(df2), ] # remove rows with NA to allow for calculation.
df2$delta_case <- df2$total.confirmed - df2$total.deceased - df2$total.recovered
df2$date <- as_date(df2$date)
df3 = tibble(dates = df2$date, I = df2$delta_case)
str(df3)
config = make_config(list(mean_si = 3.96, std_mean_si = 0.215,
min_mean_si = 3.53, max_mean_si = 4.39,
std_si = 4.75, std_std_si = 0.145,
min_std_si = 4.46, max_std_si = 5.07,
n1 = 468, n2 = 468,mean_prior=2.6,
std_prior=2))
rt_nonparametric = estimate_R(df3,
method = "uncertain_si",
config = config)
plot(rt_nonparametric)
glimpse(res)
res <- rt_nonparametric$R
res <- rt_nonparametric$R
res
n <- length(df3$dates)
dates_list <- dates[8:n]
res_df <- tibble(rt = rt_nonparametric$R$`Mean(R)`,
low = rt_nonparametric$R$`Mean(R)` - 1.96*rt_nonparametric$R$`Std(R)`,
high = rt_nonparametric$R$`Mean(R)` + 1.96*rt_nonparametric$R$`Std(R)`,
dates = dates_list,
city = city)
dates <- rt_nonparametric$dates
res <- rt_nonparametric$R
#
dates <- rt_nonparametric$dates
#
glimpse(res)
#
length(dates)
n <- length(df3$dates)
dates_list <- dates[8:n]
res_df <- tibble(rt = rt_nonparametric$R$`Mean(R)`,
low = rt_nonparametric$R$`Mean(R)` - 1.96*rt_nonparametric$R$`Std(R)`,
high = rt_nonparametric$R$`Mean(R)` + 1.96*rt_nonparametric$R$`Std(R)`,
dates = dates_list,
city = city)
str(res_df)
res_df <- tibble(rt = rt_nonparametric$R$`Mean(R)`,
low = rt_nonparametric$R$`Mean(R)` - 1.96*rt_nonparametric$R$`Std(R)`,
high = rt_nonparametric$R$`Mean(R)` + 1.96*rt_nonparametric$R$`Std(R)`,
dates = dates_list,
city = city,
median = rt_nonparametric$R$`Median(R)`)
str(res_df)
library(easypackages)
libraries("lubridate","tidyverse","EpiEstim","ggplot2",
"gridExtra","incidence","magrittr",
"readr","knitr","readxl","googlesheets4")
# get the data --
gs4_deauth()
sheets_url <- "https://docs.google.com/spreadsheets/d/1HeTZKEXtSYFDNKmVEcRmF573k2ZraDb6DzgCOSXI0f0/edit#gid=0"
df <- read_sheet(sheets_url, sheet = "city_stats")
city <- "Mumbai"
df2 <- df %>% filter(district == city)
glimpse(df2)
# todo v2 --> city <- args[1]
# todo v2 --> command line args or simply read from results of city criteria filters for RT and all districts for DT
# ensure that there is no missing data for the columns here.
# we need only 5 columns for the calculation -
df2 <- df2 %>% dplyr::select(date, district, total.confirmed, total.deceased, total.recovered) # keep only col needed.
df2 <- df2[complete.cases(df2), ] # remove rows with NA to allow for calculation.
df2$delta_case <- df2$total.confirmed - df2$total.deceased - df2$total.recovered
df2$date <- as_date(df2$date)
df3 = tibble(dates = df2$date, I = df2$delta_case)
str(df3)
config = make_config(list(mean_si = 3.96, std_mean_si = 0.215,
min_mean_si = 3.53, max_mean_si = 4.39,
std_si = 4.75, std_std_si = 0.145,
min_std_si = 4.46, max_std_si = 5.07,
n1 = 468, n2 = 468,mean_prior=2.6,
std_prior=2))
rt_nonparametric = estimate_R(df3,
method = "uncertain_si",
config = config)
# plot(rt_nonparametric)
#
#
res <- rt_nonparametric$R
#
# dates <- rt_nonparametric$dates
#
#  glimpse(res)
#
#  length(dates)
n <- length(df3$dates)
dates_list <- dates[8:n]
res_df <- tibble(rt = rt_nonparametric$R$`Mean(R)`,
low = rt_nonparametric$R$`Mean(R)` - 1.96*rt_nonparametric$R$`Std(R)`,
high = rt_nonparametric$R$`Mean(R)` + 1.96*rt_nonparametric$R$`Std(R)`,
dates = dates_list,
city = city,
median = rt_nonparametric$R$`Median(R)`)
str(res_df)
# plot(rt_nonparametric)
#
#
res <- rt_nonparametric$R
#
dates <- rt_nonparametric$dates
#
#  glimpse(res)
#
#  length(dates)
n <- length(df3$dates)
dates_list <- dates[8:n]
res_df <- tibble(rt = rt_nonparametric$R$`Mean(R)`,
low = rt_nonparametric$R$`Mean(R)` - 1.96*rt_nonparametric$R$`Std(R)`,
high = rt_nonparametric$R$`Mean(R)` + 1.96*rt_nonparametric$R$`Std(R)`,
dates = dates_list,
city = city,
median = rt_nonparametric$R$`Median(R)`)
str(res_df)
library(easypackages)
libraries("lubridate","tidyverse","EpiEstim","ggplot2",
"gridExtra","incidence","magrittr",
"readr","knitr","readxl","googlesheets4")
# get the data --
gs4_deauth()
sheets_url <- "https://docs.google.com/spreadsheets/d/1HeTZKEXtSYFDNKmVEcRmF573k2ZraDb6DzgCOSXI0f0/edit#gid=0"
df <- read_sheet(sheets_url, sheet = "city_stats")
city <- "Mumbai"
df2 <- df %>% filter(district == city)
glimpse(df2)
# todo v2 --> city <- args[1]
# todo v2 --> command line args or simply read from results of city criteria filters for RT and all districts for DT
# ensure that there is no missing data for the columns here.
# we need only 5 columns for the calculation -
df2 <- df2 %>% dplyr::select(date, district, total.confirmed, total.deceased, total.recovered) # keep only col needed.
df2 <- df2[complete.cases(df2), ] # remove rows with NA to allow for calculation.
df2$delta_case <- df2$total.confirmed - df2$total.deceased - df2$total.recovered
df2$date <- as_date(df2$date)
df3 = tibble(dates = df2$date, I = df2$delta_case)
str(df3)
# now to calculate the Rt using the parametric method
# with mean and sd of the serial interval.
# as per the publication mean = 3.96
# sd = 4.75
# rt_parametric <- estimate_R(df3,
#                   method="parametric_si",
#                   config = make_config(list(
#                   mean_si = 2.6,
#                   std_si = 1.5)))
#
# rt_parametric
#
# rt1 <- tibble(rt = rt_parametric$R$`Mean(R)`,
# low = rt_parametric$R$`Mean(R)` - 1.96*rt_parametric$R$`Std(R)`,
# high = rt_parametric$R$`Mean(R)` + 1.96*rt_parametric$R$`Std(R)`,
# id = 1:nrow(rt1))
#
# plot(rt_parametric)
config = make_config(list(mean_si = 3.96, std_mean_si = 0.215,
min_mean_si = 3.53, max_mean_si = 4.39,
std_si = 4.75, std_std_si = 0.145,
min_std_si = 4.46, max_std_si = 5.07,
n1 = 468, n2 = 468,mean_prior=2.6,
std_prior=2))
rt_nonparametric = estimate_R(df3,
method = "uncertain_si",
config = config)
# plot(rt_nonparametric)
#
#
res <- rt_nonparametric$R
#
dates <- rt_nonparametric$dates
#
#  glimpse(res)
#
#  length(dates)
n <- length(df3$dates)
dates_list <- dates[8:n]
res_df <- tibble(rt = rt_nonparametric$R$`Mean(R)`,
low = rt_nonparametric$R$`Mean(R)` - 1.96*rt_nonparametric$R$`Std(R)`,
high = rt_nonparametric$R$`Mean(R)` + 1.96*rt_nonparametric$R$`Std(R)`,
dates = dates_list,
city = city,
median = rt_nonparametric$R$`Median(R)`)
str(res_df)
